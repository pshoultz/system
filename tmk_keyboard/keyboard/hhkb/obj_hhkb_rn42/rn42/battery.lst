   1               		.file	"battery.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.battery_led,"ax",@progbits
  11               	.global	battery_led
  13               	battery_led:
  14               	.LVL0:
  15               	.LFB7:
  16               		.file 1 "rn42/battery.c"
   1:rn42/battery.c **** #include <avr/io.h>
   2:rn42/battery.c **** #include <util/delay.h>
   3:rn42/battery.c **** #include "battery.h"
   4:rn42/battery.c **** 
   5:rn42/battery.c **** 
   6:rn42/battery.c **** /*
   7:rn42/battery.c ****  * Battery
   8:rn42/battery.c ****  */
   9:rn42/battery.c **** void battery_init(void)
  10:rn42/battery.c **** {
  11:rn42/battery.c ****     // blink 
  12:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
  13:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
  14:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
  15:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
  16:rn42/battery.c ****     // LED indicates charger status
  17:rn42/battery.c ****     battery_led(LED_CHARGER);
  18:rn42/battery.c **** 
  19:rn42/battery.c ****     // ADC setting for voltage monitor
  20:rn42/battery.c ****     // Ref:2.56V band-gap, Input:ADC0(PF0), Prescale:128(16MHz/128=125KHz)
  21:rn42/battery.c ****     ADMUX = (1<<REFS1) | (1<<REFS0);
  22:rn42/battery.c ****     ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  23:rn42/battery.c ****     // digital input buffer disable(24.9.5)
  24:rn42/battery.c ****     DIDR0 = (1<<ADC0D) | (1<<ADC4D) | (1<<ADC7D);
  25:rn42/battery.c ****     DIDR1 = (1<<AIN0D);
  26:rn42/battery.c ****     DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC11D) | (1<<ADC12D) | (1<<ADC13D);
  27:rn42/battery.c **** 
  28:rn42/battery.c ****     // ADC disable voltate divider(PF4)
  29:rn42/battery.c ****     DDRF  |=  (1<<4);
  30:rn42/battery.c ****     PORTF &= ~(1<<4);
  31:rn42/battery.c **** }
  32:rn42/battery.c **** 
  33:rn42/battery.c **** // Indicator for battery
  34:rn42/battery.c **** void battery_led(battery_led_t val)
  35:rn42/battery.c **** {
  17               		.loc 1 35 1 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  36:rn42/battery.c ****     if (val == LED_TOGGLE) {
  23               		.loc 1 36 5 view .LVU1
  24               		.loc 1 36 8 is_stmt 0 view .LVU2
  25 0000 8330      		cpi r24,lo8(3)
  26 0002 01F4      		brne .L2
  37:rn42/battery.c ****         // Toggle LED
  38:rn42/battery.c ****         DDRF  |=  (1<<5);
  27               		.loc 1 38 9 is_stmt 1 view .LVU3
  28               		.loc 1 38 15 is_stmt 0 view .LVU4
  29 0004 859A      		sbi 0x10,5
  39:rn42/battery.c ****         PINF  |=  (1<<5);
  30               		.loc 1 39 9 is_stmt 1 view .LVU5
  31               		.loc 1 39 15 is_stmt 0 view .LVU6
  32 0006 7D9A      		sbi 0xf,5
  33 0008 0895      		ret
  34               	.L2:
  40:rn42/battery.c ****     } else if (val == LED_ON) {
  35               		.loc 1 40 12 is_stmt 1 view .LVU7
  36               		.loc 1 40 15 is_stmt 0 view .LVU8
  37 000a 8130      		cpi r24,lo8(1)
  38 000c 01F4      		brne .L4
  41:rn42/battery.c ****         // On overriding charger status
  42:rn42/battery.c ****         DDRF  |=  (1<<5);
  39               		.loc 1 42 9 is_stmt 1 view .LVU9
  40               		.loc 1 42 15 is_stmt 0 view .LVU10
  41 000e 859A      		sbi 0x10,5
  43:rn42/battery.c ****         PORTF &= ~(1<<5);
  42               		.loc 1 43 9 is_stmt 1 view .LVU11
  43               	.L6:
  44:rn42/battery.c ****     } else if (val == LED_OFF) {
  45:rn42/battery.c ****         // Off overriding charger status
  46:rn42/battery.c ****         DDRF  |=  (1<<5);
  47:rn42/battery.c ****         PORTF |=  (1<<5);
  48:rn42/battery.c ****     } else {
  49:rn42/battery.c ****         // Display charger status
  50:rn42/battery.c ****         DDRF  &= ~(1<<5);
  51:rn42/battery.c ****         PORTF &= ~(1<<5);
  44               		.loc 1 51 9 view .LVU12
  45               		.loc 1 51 15 is_stmt 0 view .LVU13
  46 0010 8D98      		cbi 0x11,5
  47               	/* epilogue start */
  52:rn42/battery.c ****     }
  53:rn42/battery.c **** }
  48               		.loc 1 53 1 view .LVU14
  49 0012 0895      		ret
  50               	.L4:
  44:rn42/battery.c ****     } else if (val == LED_OFF) {
  51               		.loc 1 44 12 is_stmt 1 view .LVU15
  44:rn42/battery.c ****     } else if (val == LED_OFF) {
  52               		.loc 1 44 15 is_stmt 0 view .LVU16
  53 0014 8230      		cpi r24,lo8(2)
  54 0016 01F4      		brne .L5
  46:rn42/battery.c ****         PORTF |=  (1<<5);
  55               		.loc 1 46 9 is_stmt 1 view .LVU17
  46:rn42/battery.c ****         PORTF |=  (1<<5);
  56               		.loc 1 46 15 is_stmt 0 view .LVU18
  57 0018 859A      		sbi 0x10,5
  47:rn42/battery.c ****     } else {
  58               		.loc 1 47 9 is_stmt 1 view .LVU19
  47:rn42/battery.c ****     } else {
  59               		.loc 1 47 15 is_stmt 0 view .LVU20
  60 001a 8D9A      		sbi 0x11,5
  61 001c 0895      		ret
  62               	.L5:
  50:rn42/battery.c ****         PORTF &= ~(1<<5);
  63               		.loc 1 50 9 is_stmt 1 view .LVU21
  50:rn42/battery.c ****         PORTF &= ~(1<<5);
  64               		.loc 1 50 15 is_stmt 0 view .LVU22
  65 001e 8598      		cbi 0x10,5
  66 0020 00C0      		rjmp .L6
  67               		.cfi_endproc
  68               	.LFE7:
  70               		.section	.text.battery_init,"ax",@progbits
  71               	.global	battery_init
  73               	battery_init:
  74               	.LFB6:
  10:rn42/battery.c ****     // blink 
  75               		.loc 1 10 1 is_stmt 1 view -0
  76               		.cfi_startproc
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 0 */
  80               	.L__stack_usage = 0
  12:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
  81               		.loc 1 12 5 view .LVU24
  82 0000 81E0      		ldi r24,lo8(1)
  83 0002 0E94 0000 		call battery_led
  84               	.LVL1:
  12:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
  85               		.loc 1 12 27 view .LVU25
  86               	.LBB14:
  87               	.LBI14:
  88               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
  89               		.loc 2 166 1 view .LVU26
  90               	.LBB15:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
  91               		.loc 2 168 2 view .LVU27
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
  92               		.loc 2 172 2 view .LVU28
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
  93               		.loc 2 173 2 view .LVU29
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
  94               		.loc 2 174 2 view .LVU30
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
  95               		.loc 2 184 3 view .LVU31
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  96               		.loc 2 187 2 view .LVU32
  97 0006 2FEF      		ldi r18,lo8(319999)
  98 0008 81EE      		ldi r24,hi8(319999)
  99 000a 94E0      		ldi r25,hlo8(319999)
 100 000c 2150      	1:	subi r18,1
 101 000e 8040      		sbci r24,0
 102 0010 9040      		sbci r25,0
 103 0012 01F4      		brne 1b
 104 0014 00C0      		rjmp .
 105 0016 0000      		nop
 106               	.LVL2:
 107               		.loc 2 187 2 is_stmt 0 view .LVU33
 108               	.LBE15:
 109               	.LBE14:
  13:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
 110               		.loc 1 13 5 is_stmt 1 view .LVU34
 111 0018 82E0      		ldi r24,lo8(2)
 112 001a 0E94 0000 		call battery_led
 113               	.LVL3:
  13:rn42/battery.c ****     battery_led(LED_ON);  _delay_ms(100);
 114               		.loc 1 13 27 view .LVU35
 115               	.LBB16:
 116               	.LBI16:
 166:/usr/avr/include/util/delay.h **** {
 117               		.loc 2 166 1 view .LVU36
 118               	.LBB17:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 119               		.loc 2 168 2 view .LVU37
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 120               		.loc 2 172 2 view .LVU38
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 121               		.loc 2 173 2 view .LVU39
 174:/usr/avr/include/util/delay.h **** 
 122               		.loc 2 174 2 view .LVU40
 184:/usr/avr/include/util/delay.h **** 	#endif
 123               		.loc 2 184 3 view .LVU41
 124               		.loc 2 187 2 view .LVU42
 125 001e 2FEF      		ldi r18,lo8(319999)
 126 0020 81EE      		ldi r24,hi8(319999)
 127 0022 94E0      		ldi r25,hlo8(319999)
 128 0024 2150      	1:	subi r18,1
 129 0026 8040      		sbci r24,0
 130 0028 9040      		sbci r25,0
 131 002a 01F4      		brne 1b
 132 002c 00C0      		rjmp .
 133 002e 0000      		nop
 134               	.LVL4:
 135               		.loc 2 187 2 is_stmt 0 view .LVU43
 136               	.LBE17:
 137               	.LBE16:
  14:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
 138               		.loc 1 14 5 is_stmt 1 view .LVU44
 139 0030 81E0      		ldi r24,lo8(1)
 140 0032 0E94 0000 		call battery_led
 141               	.LVL5:
  14:rn42/battery.c ****     battery_led(LED_OFF); _delay_ms(100);
 142               		.loc 1 14 27 view .LVU45
 143               	.LBB18:
 144               	.LBI18:
 166:/usr/avr/include/util/delay.h **** {
 145               		.loc 2 166 1 view .LVU46
 146               	.LBB19:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147               		.loc 2 168 2 view .LVU47
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 148               		.loc 2 172 2 view .LVU48
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 149               		.loc 2 173 2 view .LVU49
 174:/usr/avr/include/util/delay.h **** 
 150               		.loc 2 174 2 view .LVU50
 184:/usr/avr/include/util/delay.h **** 	#endif
 151               		.loc 2 184 3 view .LVU51
 152               		.loc 2 187 2 view .LVU52
 153 0036 2FEF      		ldi r18,lo8(319999)
 154 0038 81EE      		ldi r24,hi8(319999)
 155 003a 94E0      		ldi r25,hlo8(319999)
 156 003c 2150      	1:	subi r18,1
 157 003e 8040      		sbci r24,0
 158 0040 9040      		sbci r25,0
 159 0042 01F4      		brne 1b
 160 0044 00C0      		rjmp .
 161 0046 0000      		nop
 162               	.LVL6:
 163               		.loc 2 187 2 is_stmt 0 view .LVU53
 164               	.LBE19:
 165               	.LBE18:
  15:rn42/battery.c ****     // LED indicates charger status
 166               		.loc 1 15 5 is_stmt 1 view .LVU54
 167 0048 82E0      		ldi r24,lo8(2)
 168 004a 0E94 0000 		call battery_led
 169               	.LVL7:
  15:rn42/battery.c ****     // LED indicates charger status
 170               		.loc 1 15 27 view .LVU55
 171               	.LBB20:
 172               	.LBI20:
 166:/usr/avr/include/util/delay.h **** {
 173               		.loc 2 166 1 view .LVU56
 174               	.LBB21:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 175               		.loc 2 168 2 view .LVU57
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 176               		.loc 2 172 2 view .LVU58
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 177               		.loc 2 173 2 view .LVU59
 174:/usr/avr/include/util/delay.h **** 
 178               		.loc 2 174 2 view .LVU60
 184:/usr/avr/include/util/delay.h **** 	#endif
 179               		.loc 2 184 3 view .LVU61
 180               		.loc 2 187 2 view .LVU62
 181 004e 2FEF      		ldi r18,lo8(319999)
 182 0050 81EE      		ldi r24,hi8(319999)
 183 0052 94E0      		ldi r25,hlo8(319999)
 184 0054 2150      	1:	subi r18,1
 185 0056 8040      		sbci r24,0
 186 0058 9040      		sbci r25,0
 187 005a 01F4      		brne 1b
 188 005c 00C0      		rjmp .
 189 005e 0000      		nop
 190               	.LVL8:
 191               		.loc 2 187 2 is_stmt 0 view .LVU63
 192               	.LBE21:
 193               	.LBE20:
  17:rn42/battery.c **** 
 194               		.loc 1 17 5 is_stmt 1 view .LVU64
 195 0060 80E0      		ldi r24,0
 196 0062 0E94 0000 		call battery_led
 197               	.LVL9:
  21:rn42/battery.c ****     ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 198               		.loc 1 21 5 view .LVU65
  21:rn42/battery.c ****     ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
 199               		.loc 1 21 11 is_stmt 0 view .LVU66
 200 0066 80EC      		ldi r24,lo8(-64)
 201 0068 8093 7C00 		sts 124,r24
  22:rn42/battery.c ****     // digital input buffer disable(24.9.5)
 202               		.loc 1 22 5 is_stmt 1 view .LVU67
  22:rn42/battery.c ****     // digital input buffer disable(24.9.5)
 203               		.loc 1 22 12 is_stmt 0 view .LVU68
 204 006c 87E0      		ldi r24,lo8(7)
 205 006e 8093 7A00 		sts 122,r24
  24:rn42/battery.c ****     DIDR1 = (1<<AIN0D);
 206               		.loc 1 24 5 is_stmt 1 view .LVU69
  24:rn42/battery.c ****     DIDR1 = (1<<AIN0D);
 207               		.loc 1 24 11 is_stmt 0 view .LVU70
 208 0072 81E9      		ldi r24,lo8(-111)
 209 0074 8093 7E00 		sts 126,r24
  25:rn42/battery.c ****     DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC11D) | (1<<ADC12D) | (1<<ADC13D);
 210               		.loc 1 25 5 is_stmt 1 view .LVU71
  25:rn42/battery.c ****     DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC11D) | (1<<ADC12D) | (1<<ADC13D);
 211               		.loc 1 25 11 is_stmt 0 view .LVU72
 212 0078 81E0      		ldi r24,lo8(1)
 213 007a 8093 7F00 		sts 127,r24
  26:rn42/battery.c **** 
 214               		.loc 1 26 5 is_stmt 1 view .LVU73
  26:rn42/battery.c **** 
 215               		.loc 1 26 11 is_stmt 0 view .LVU74
 216 007e 8BE3      		ldi r24,lo8(59)
 217 0080 8093 7D00 		sts 125,r24
  29:rn42/battery.c ****     PORTF &= ~(1<<4);
 218               		.loc 1 29 5 is_stmt 1 view .LVU75
  29:rn42/battery.c ****     PORTF &= ~(1<<4);
 219               		.loc 1 29 11 is_stmt 0 view .LVU76
 220 0084 849A      		sbi 0x10,4
  30:rn42/battery.c **** }
 221               		.loc 1 30 5 is_stmt 1 view .LVU77
  30:rn42/battery.c **** }
 222               		.loc 1 30 11 is_stmt 0 view .LVU78
 223 0086 8C98      		cbi 0x11,4
 224               	/* epilogue start */
  31:rn42/battery.c **** 
 225               		.loc 1 31 1 view .LVU79
 226 0088 0895      		ret
 227               		.cfi_endproc
 228               	.LFE6:
 230               		.section	.text.battery_charging,"ax",@progbits
 231               	.global	battery_charging
 233               	battery_charging:
 234               	.LFB8:
  54:rn42/battery.c **** 
  55:rn42/battery.c **** bool battery_charging(void)
  56:rn42/battery.c **** {
 235               		.loc 1 56 1 is_stmt 1 view -0
 236               		.cfi_startproc
 237               	/* prologue: function */
 238               	/* frame size = 0 */
 239               	/* stack size = 0 */
 240               	.L__stack_usage = 0
  57:rn42/battery.c ****     if (!(USBSTA&(1<<VBUS))) return false;
 241               		.loc 1 57 5 view .LVU81
 242               		.loc 1 57 11 is_stmt 0 view .LVU82
 243 0000 8091 D900 		lds r24,217
 244               		.loc 1 57 8 view .LVU83
 245 0004 80FF      		sbrs r24,0
 246 0006 00C0      		rjmp .L10
  58:rn42/battery.c **** 
  59:rn42/battery.c ****     // Charger Status:
  60:rn42/battery.c ****     //   MCP73831   MCP73832   LTC4054  Status
  61:rn42/battery.c ****     //   Hi-Z       Hi-Z       Hi-Z     Shutdown/No Battery
  62:rn42/battery.c ****     //   Low        Low        Low      Charging
  63:rn42/battery.c ****     //   Hi         Hi-Z       Hi-Z     Charged
  64:rn42/battery.c **** 
  65:rn42/battery.c ****     // preserve last register status
  66:rn42/battery.c ****     uint8_t ddrf_prev  = DDRF;
 247               		.loc 1 66 5 is_stmt 1 view .LVU84
 248               		.loc 1 66 13 is_stmt 0 view .LVU85
 249 0008 90B3      		in r25,0x10
 250               	.LVL10:
  67:rn42/battery.c ****     uint8_t portf_prev = PORTF;
 251               		.loc 1 67 5 is_stmt 1 view .LVU86
 252               		.loc 1 67 13 is_stmt 0 view .LVU87
 253 000a 31B3      		in r19,0x11
 254               	.LVL11:
  68:rn42/battery.c **** 
  69:rn42/battery.c ****     // Input with pullup
  70:rn42/battery.c ****     DDRF  &= ~(1<<5);
 255               		.loc 1 70 5 is_stmt 1 view .LVU88
 256               		.loc 1 70 11 is_stmt 0 view .LVU89
 257 000c 8598      		cbi 0x10,5
  71:rn42/battery.c ****     PORTF |=  (1<<5);
 258               		.loc 1 71 5 is_stmt 1 view .LVU90
 259               		.loc 1 71 11 is_stmt 0 view .LVU91
 260 000e 8D9A      		sbi 0x11,5
  72:rn42/battery.c ****     _delay_ms(1);
 261               		.loc 1 72 5 is_stmt 1 view .LVU92
 262               	.LVL12:
 263               	.LBB22:
 264               	.LBI22:
 166:/usr/avr/include/util/delay.h **** {
 265               		.loc 2 166 1 view .LVU93
 266               	.LBB23:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 267               		.loc 2 168 2 view .LVU94
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 268               		.loc 2 172 2 view .LVU95
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 269               		.loc 2 173 2 view .LVU96
 174:/usr/avr/include/util/delay.h **** 
 270               		.loc 2 174 2 view .LVU97
 184:/usr/avr/include/util/delay.h **** 	#endif
 271               		.loc 2 184 3 view .LVU98
 272               		.loc 2 187 2 view .LVU99
 273 0010 EFE9      		ldi r30,lo8(3999)
 274 0012 FFE0      		ldi r31,hi8(3999)
 275 0014 3197      	1:	sbiw r30,1
 276 0016 01F4      		brne 1b
 277 0018 00C0      		rjmp .
 278 001a 0000      		nop
 279               	.LVL13:
 280               		.loc 2 187 2 is_stmt 0 view .LVU100
 281               	.LBE23:
 282               	.LBE22:
  73:rn42/battery.c ****     bool charging = PINF&(1<<5) ? false : true;
 283               		.loc 1 73 5 is_stmt 1 view .LVU101
 284               		.loc 1 73 21 is_stmt 0 view .LVU102
 285 001c 8FB1      		in r24,0xf
 286               		.loc 1 73 10 view .LVU103
 287 001e 85FB      		bst r24,5
 288 0020 8827      		clr r24
 289 0022 80F9      		bld r24,0
 290 0024 21E0      		ldi r18,lo8(1)
 291 0026 8227      		eor r24,r18
 292               	.LVL14:
  74:rn42/battery.c **** 
  75:rn42/battery.c ****     // restore last register status
  76:rn42/battery.c ****     DDRF  = (DDRF&~(1<<5))  | (ddrf_prev&(1<<5));
 293               		.loc 1 76 5 is_stmt 1 view .LVU104
 294               		.loc 1 76 14 is_stmt 0 view .LVU105
 295 0028 20B3      		in r18,0x10
 296               		.loc 1 76 18 view .LVU106
 297 002a 2F7D      		andi r18,lo8(-33)
 298               		.loc 1 76 41 view .LVU107
 299 002c 9072      		andi r25,lo8(32)
 300               	.LVL15:
 301               		.loc 1 76 29 view .LVU108
 302 002e 292B      		or r18,r25
 303               		.loc 1 76 11 view .LVU109
 304 0030 20BB      		out 0x10,r18
  77:rn42/battery.c ****     PORTF = (PORTF&~(1<<5)) | (portf_prev&(1<<5));
 305               		.loc 1 77 5 is_stmt 1 view .LVU110
 306               		.loc 1 77 14 is_stmt 0 view .LVU111
 307 0032 91B3      		in r25,0x11
 308               		.loc 1 77 19 view .LVU112
 309 0034 9F7D      		andi r25,lo8(-33)
 310               		.loc 1 77 42 view .LVU113
 311 0036 3072      		andi r19,lo8(32)
 312               	.LVL16:
 313               		.loc 1 77 29 view .LVU114
 314 0038 932B      		or r25,r19
 315               		.loc 1 77 11 view .LVU115
 316 003a 91BB      		out 0x11,r25
  78:rn42/battery.c **** 
  79:rn42/battery.c ****     // TODO: With MCP73831 this can not get stable status when charging.
  80:rn42/battery.c ****     // LED is powered from PSEL line(USB or Lipo)
  81:rn42/battery.c ****     // due to weak low output of STAT pin?
  82:rn42/battery.c ****     // due to pull-up'd via resitor and LED?
  83:rn42/battery.c ****     return charging;
 317               		.loc 1 83 5 is_stmt 1 view .LVU116
 318               		.loc 1 83 12 is_stmt 0 view .LVU117
 319 003c 0895      		ret
 320               	.LVL17:
 321               	.L10:
  57:rn42/battery.c **** 
 322               		.loc 1 57 37 view .LVU118
 323 003e 80E0      		ldi r24,0
 324               	/* epilogue start */
  84:rn42/battery.c **** }
 325               		.loc 1 84 1 view .LVU119
 326 0040 0895      		ret
 327               		.cfi_endproc
 328               	.LFE8:
 330               		.section	.text.battery_voltage,"ax",@progbits
 331               	.global	battery_voltage
 333               	battery_voltage:
 334               	.LFB9:
  85:rn42/battery.c **** 
  86:rn42/battery.c **** // Returns voltage in mV
  87:rn42/battery.c **** uint16_t battery_voltage(void)
  88:rn42/battery.c **** {
 335               		.loc 1 88 1 is_stmt 1 view -0
 336               		.cfi_startproc
 337 0000 CF93      		push r28
 338               	.LCFI0:
 339               		.cfi_def_cfa_offset 3
 340               		.cfi_offset 28, -2
 341 0002 DF93      		push r29
 342               	.LCFI1:
 343               		.cfi_def_cfa_offset 4
 344               		.cfi_offset 29, -3
 345 0004 00D0      		rcall .
 346               	.LCFI2:
 347               		.cfi_def_cfa_offset 6
 348 0006 CDB7      		in r28,__SP_L__
 349 0008 DEB7      		in r29,__SP_H__
 350               	.LCFI3:
 351               		.cfi_def_cfa_register 28
 352               	/* prologue: function */
 353               	/* frame size = 2 */
 354               	/* stack size = 4 */
 355               	.L__stack_usage = 4
  89:rn42/battery.c ****     // ADC disable voltate divider(PF4)
  90:rn42/battery.c ****     DDRF  |=  (1<<4);
 356               		.loc 1 90 5 view .LVU121
 357               		.loc 1 90 11 is_stmt 0 view .LVU122
 358 000a 849A      		sbi 0x10,4
  91:rn42/battery.c ****     PORTF |=  (1<<4);
 359               		.loc 1 91 5 is_stmt 1 view .LVU123
 360               		.loc 1 91 11 is_stmt 0 view .LVU124
 361 000c 8C9A      		sbi 0x11,4
  92:rn42/battery.c **** 
  93:rn42/battery.c ****     volatile uint16_t bat;
 362               		.loc 1 93 5 is_stmt 1 view .LVU125
  94:rn42/battery.c ****     ADCSRA |= (1<<ADEN);
 363               		.loc 1 94 5 view .LVU126
 364               		.loc 1 94 12 is_stmt 0 view .LVU127
 365 000e 8091 7A00 		lds r24,122
 366 0012 8068      		ori r24,lo8(-128)
 367 0014 8093 7A00 		sts 122,r24
  95:rn42/battery.c ****     _delay_ms(1);   // wait for charging S/H capacitance
 368               		.loc 1 95 5 is_stmt 1 view .LVU128
 369               	.LVL18:
 370               	.LBB24:
 371               	.LBI24:
 166:/usr/avr/include/util/delay.h **** {
 372               		.loc 2 166 1 view .LVU129
 373               	.LBB25:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 374               		.loc 2 168 2 view .LVU130
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 375               		.loc 2 172 2 view .LVU131
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 376               		.loc 2 173 2 view .LVU132
 174:/usr/avr/include/util/delay.h **** 
 377               		.loc 2 174 2 view .LVU133
 184:/usr/avr/include/util/delay.h **** 	#endif
 378               		.loc 2 184 3 view .LVU134
 379               		.loc 2 187 2 view .LVU135
 380 0018 8FE9      		ldi r24,lo8(3999)
 381 001a 9FE0      		ldi r25,hi8(3999)
 382 001c 0197      	1:	sbiw r24,1
 383 001e 01F4      		brne 1b
 384 0020 00C0      		rjmp .
 385 0022 0000      		nop
 386               	.LVL19:
 387               		.loc 2 187 2 is_stmt 0 view .LVU136
 388               	.LBE25:
 389               	.LBE24:
  96:rn42/battery.c **** 
  97:rn42/battery.c ****     ADCSRA |= (1<<ADSC);
 390               		.loc 1 97 5 is_stmt 1 view .LVU137
 391               		.loc 1 97 12 is_stmt 0 view .LVU138
 392 0024 8091 7A00 		lds r24,122
 393 0028 8064      		ori r24,lo8(64)
 394 002a 8093 7A00 		sts 122,r24
  98:rn42/battery.c ****     while (ADCSRA & (1<<ADSC)) ;
 395               		.loc 1 98 5 is_stmt 1 view .LVU139
 396               	.L12:
 397               		.loc 1 98 32 discriminator 1 view .LVU140
 398               		.loc 1 98 12 is_stmt 0 discriminator 1 view .LVU141
 399 002e 8091 7A00 		lds r24,122
 400               		.loc 1 98 11 discriminator 1 view .LVU142
 401 0032 86FD      		sbrc r24,6
 402 0034 00C0      		rjmp .L12
  99:rn42/battery.c ****     bat = ADC;
 403               		.loc 1 99 5 is_stmt 1 view .LVU143
 404               		.loc 1 99 11 is_stmt 0 view .LVU144
 405 0036 8091 7800 		lds r24,120
 406 003a 9091 7900 		lds r25,120+1
 407               		.loc 1 99 9 view .LVU145
 408 003e 9A83      		std Y+2,r25
 409 0040 8983      		std Y+1,r24
 100:rn42/battery.c **** 
 101:rn42/battery.c ****     ADCSRA &= ~(1<<ADEN);
 410               		.loc 1 101 5 is_stmt 1 view .LVU146
 411               		.loc 1 101 12 is_stmt 0 view .LVU147
 412 0042 8091 7A00 		lds r24,122
 413 0046 8F77      		andi r24,lo8(127)
 414 0048 8093 7A00 		sts 122,r24
 102:rn42/battery.c **** 
 103:rn42/battery.c ****     // ADC disable voltate divider(PF4)
 104:rn42/battery.c ****     DDRF  |=  (1<<4);
 415               		.loc 1 104 5 is_stmt 1 view .LVU148
 416               		.loc 1 104 11 is_stmt 0 view .LVU149
 417 004c 849A      		sbi 0x10,4
 105:rn42/battery.c ****     PORTF &= ~(1<<4);
 418               		.loc 1 105 5 is_stmt 1 view .LVU150
 419               		.loc 1 105 11 is_stmt 0 view .LVU151
 420 004e 8C98      		cbi 0x11,4
 106:rn42/battery.c **** 
 107:rn42/battery.c ****     return (bat - BATTERY_ADC_OFFSET) * BATTERY_ADC_RESOLUTION;
 421               		.loc 1 107 5 is_stmt 1 view .LVU152
 422               		.loc 1 107 39 is_stmt 0 view .LVU153
 423 0050 2981      		ldd r18,Y+1
 424 0052 3A81      		ldd r19,Y+2
 425 0054 45E0      		ldi r20,lo8(5)
 426 0056 429F      		mul r20,r18
 427 0058 C001      		movw r24,r0
 428 005a 439F      		mul r20,r19
 429 005c 900D      		add r25,r0
 430 005e 1124      		clr __zero_reg__
 108:rn42/battery.c **** }
 431               		.loc 1 108 1 view .LVU154
 432 0060 8055      		subi r24,80
 433 0062 9109      		sbc r25,__zero_reg__
 434               	/* epilogue start */
 435 0064 0F90      		pop __tmp_reg__
 436 0066 0F90      		pop __tmp_reg__
 437 0068 DF91      		pop r29
 438 006a CF91      		pop r28
 439 006c 0895      		ret
 440               		.cfi_endproc
 441               	.LFE9:
 443               		.section	.text.battery_status,"ax",@progbits
 444               	.global	battery_status
 446               	battery_status:
 447               	.LFB11:
 109:rn42/battery.c **** 
 110:rn42/battery.c **** static bool low_voltage(void) {
 111:rn42/battery.c ****     static bool low = false;
 112:rn42/battery.c ****     uint16_t v = battery_voltage();
 113:rn42/battery.c ****     if (v < BATTERY_VOLTAGE_LOW_LIMIT) {
 114:rn42/battery.c ****         low = true;
 115:rn42/battery.c ****     } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
 116:rn42/battery.c ****         low = false;
 117:rn42/battery.c ****     }
 118:rn42/battery.c ****     return low;
 119:rn42/battery.c **** }
 120:rn42/battery.c **** 
 121:rn42/battery.c **** battery_status_t battery_status(void)
 122:rn42/battery.c **** {
 448               		.loc 1 122 1 is_stmt 1 view -0
 449               		.cfi_startproc
 450               	/* prologue: function */
 451               	/* frame size = 0 */
 452               	/* stack size = 0 */
 453               	.L__stack_usage = 0
 123:rn42/battery.c ****     if (USBSTA&(1<<VBUS)) {
 454               		.loc 1 123 5 view .LVU156
 455               		.loc 1 123 9 is_stmt 0 view .LVU157
 456 0000 8091 D900 		lds r24,217
 457               		.loc 1 123 8 view .LVU158
 458 0004 80FD      		sbrc r24,0
 124:rn42/battery.c ****         /* powered */
 125:rn42/battery.c ****         return battery_charging() ? CHARGING : FULL_CHARGED;
 459               		.loc 1 125 9 is_stmt 1 view .LVU159
 460               		.loc 1 125 16 is_stmt 0 view .LVU160
 461 0006 0C94 0000 		jmp battery_charging
 462               	.LVL20:
 463               	.L15:
 126:rn42/battery.c ****     } else {
 127:rn42/battery.c ****         /* not powered */
 128:rn42/battery.c ****         return low_voltage() ? LOW_VOLTAGE : DISCHARGING;
 464               		.loc 1 128 9 is_stmt 1 view .LVU161
 465               	.LBB28:
 466               	.LBI28:
 110:rn42/battery.c ****     static bool low = false;
 467               		.loc 1 110 13 view .LVU162
 468               	.LBB29:
 111:rn42/battery.c ****     uint16_t v = battery_voltage();
 469               		.loc 1 111 5 view .LVU163
 112:rn42/battery.c ****     if (v < BATTERY_VOLTAGE_LOW_LIMIT) {
 470               		.loc 1 112 5 view .LVU164
 112:rn42/battery.c ****     if (v < BATTERY_VOLTAGE_LOW_LIMIT) {
 471               		.loc 1 112 18 is_stmt 0 view .LVU165
 472 000a 0E94 0000 		call battery_voltage
 473               	.LVL21:
 113:rn42/battery.c ****         low = true;
 474               		.loc 1 113 5 is_stmt 1 view .LVU166
 113:rn42/battery.c ****         low = true;
 475               		.loc 1 113 8 is_stmt 0 view .LVU167
 476 000e 8C3A      		cpi r24,-84
 477 0010 2DE0      		ldi r18,13
 478 0012 9207      		cpc r25,r18
 479 0014 00F4      		brsh .L16
 114:rn42/battery.c ****     } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
 480               		.loc 1 114 9 is_stmt 1 view .LVU168
 114:rn42/battery.c ****     } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
 481               		.loc 1 114 13 is_stmt 0 view .LVU169
 482 0016 81E0      		ldi r24,lo8(1)
 483               	.LVL22:
 114:rn42/battery.c ****     } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
 484               		.loc 1 114 13 view .LVU170
 485 0018 8093 0000 		sts low.1716,r24
 118:rn42/battery.c **** }
 486               		.loc 1 118 5 is_stmt 1 view .LVU171
 487               	.L19:
 118:rn42/battery.c **** }
 488               		.loc 1 118 5 is_stmt 0 view .LVU172
 489               	.LBE29:
 490               	.LBE28:
 491               		.loc 1 128 44 view .LVU173
 492 001c 83E0      		ldi r24,lo8(3)
 493               	/* epilogue start */
 129:rn42/battery.c ****     }
 130:rn42/battery.c **** }
 494               		.loc 1 130 1 view .LVU174
 495 001e 0895      		ret
 496               	.LVL23:
 497               	.L16:
 498               	.LBB32:
 499               	.LBB30:
 115:rn42/battery.c ****         low = false;
 500               		.loc 1 115 12 is_stmt 1 view .LVU175
 115:rn42/battery.c ****         low = false;
 501               		.loc 1 115 15 is_stmt 0 view .LVU176
 502 0020 8537      		cpi r24,117
 503 0022 9E40      		sbci r25,14
 504 0024 00F0      		brlo .L18
 116:rn42/battery.c ****     }
 505               		.loc 1 116 9 is_stmt 1 view .LVU177
 116:rn42/battery.c ****     }
 506               		.loc 1 116 13 is_stmt 0 view .LVU178
 507 0026 1092 0000 		sts low.1716,__zero_reg__
 118:rn42/battery.c **** }
 508               		.loc 1 118 5 is_stmt 1 view .LVU179
 509               	.LVL24:
 510               	.L20:
 118:rn42/battery.c **** }
 511               		.loc 1 118 5 is_stmt 0 view .LVU180
 512               	.LBE30:
 513               	.LBE32:
 128:rn42/battery.c ****     }
 514               		.loc 1 128 44 view .LVU181
 515 002a 82E0      		ldi r24,lo8(2)
 516 002c 0895      		ret
 517               	.LVL25:
 518               	.L18:
 519               	.LBB33:
 520               	.LBB31:
 118:rn42/battery.c **** }
 521               		.loc 1 118 5 is_stmt 1 view .LVU182
 118:rn42/battery.c **** }
 522               		.loc 1 118 5 is_stmt 0 view .LVU183
 523               	.LBE31:
 524               	.LBE33:
 128:rn42/battery.c ****     }
 525               		.loc 1 128 44 view .LVU184
 526 002e 8091 0000 		lds r24,low.1716
 527 0032 8823      		tst r24
 528 0034 01F0      		breq .L20
 529 0036 00C0      		rjmp .L19
 530               		.cfi_endproc
 531               	.LFE11:
 533               		.section	.bss.low.1716,"aw",@nobits
 536               	low.1716:
 537 0000 00        		.zero	1
 538               		.text
 539               	.Letext0:
 540               		.file 3 "/usr/avr/include/stdint.h"
 541               		.file 4 "rn42/battery.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 battery.c
     /tmp/ccEz422w.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccEz422w.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccEz422w.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccEz422w.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccEz422w.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccEz422w.s:13     .text.battery_led:0000000000000000 battery_led
     /tmp/ccEz422w.s:73     .text.battery_init:0000000000000000 battery_init
     /tmp/ccEz422w.s:233    .text.battery_charging:0000000000000000 battery_charging
     /tmp/ccEz422w.s:333    .text.battery_voltage:0000000000000000 battery_voltage
     /tmp/ccEz422w.s:446    .text.battery_status:0000000000000000 battery_status
     /tmp/ccEz422w.s:536    .bss.low.1716:0000000000000000 low.1716

UNDEFINED SYMBOLS
__do_clear_bss
